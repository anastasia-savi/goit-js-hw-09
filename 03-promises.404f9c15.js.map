{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,OAAQJ,SAASC,cAAc,wBAE/BI,qBAAsBL,SAASC,cAAc,wBA2B/C,SAASK,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAjCPV,EAAKC,KAAKiB,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAMC,iBAKN,IAJA,IAAMC,EAAQC,OAAOtB,EAAKI,WAAWmB,OAC/BC,EAAOF,OAAOtB,EAAKK,UAAUkB,OAC7BjB,EAASgB,OAAOtB,EAAKM,OAAOiB,OAEzBE,EAAI,EAAGA,EAAInB,EAAQmB,IAC1BjB,EAAciB,EAAI,EAAGA,EAAID,EAAOH,GAC7BK,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MACjBZ,EAAA8B,OAAOC,QAAQ,uBAAwCC,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,M,IAE9DqB,OAAM,SAAAJ,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MAClBZ,EAAA8B,OAAOI,QAAQ,sBAAqCF,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,M,IAIhE,GAAoB,KAAhBW,EAAME,OAA+B,KAAfC,EAAKD,OAAiC,KAAjBjB,EAAOiB,MACpD,OAAOU,QAAQC,IAAI,kCAErBf,EAAMgB,cAAcC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('.form'),\n  firstDelay: document.querySelector(\"input[name='delay']\"),\n  delayStep: document.querySelector(\"input[name='step']\"),\n  amount: document.querySelector(\"input[name='amount']\"),\n  // submit should not be used if form is not sent to a server for processing\n  createPromisesButton: document.querySelector('button[type=button]'),\n};\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(event) {\n  event.preventDefault();\n  const delay = Number(refs.firstDelay.value);\n  const step = Number(refs.delayStep.value);\n  const amount = Number(refs.amount.value);\n\n  for (let i = 0; i < amount; i++) {\n    createPromise(i + 1, i * step + delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n\n  if (delay.value === '' || step.value === '' || amount.value === '') {\n    return console.log('Please fill in all the fields!');\n  }\n  event.currentTarget.reset();\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","firstDelay","delayStep","amount","createPromisesButton","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","delay1","Number","value","step","i","then","param","Notify","success","concat","catch","failure","console","log","currentTarget","reset"],"version":3,"file":"03-promises.404f9c15.js.map"}